{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Map.svelte",
    "Panel.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Map from './Map.svelte';\n\timport Panel from './Panel.svelte';\n\timport { getPlaces, getBoundary, random, shuffle, getState, setState } from './utils.js';\n\t\n\tlet map;\n\tlet mapstyle = './data/mapstyle.json';\n\tlet places;\n\t\n\tconst geographies = {\n\t\tlad: {\n\t\t\tname: 'Local Authorities',\n\t\t\ttext: 'local authority',\n\t\t\tcodes: ['E06', 'E07', 'E08', 'E09', 'W06', 'N09', 'S12']\n\t\t},\n\t\twar: {\n\t\t\tname: 'Electoral Wards',\n\t\t\ttext: 'ward',\n\t\t\tcodes: ['E05', 'W05', 'N08', 'S12']\n\t\t},\n\t\tcon: {\n\t\t\tname: 'Parliamentary Constituencies',\n\t\t\ttext: 'constituency',\n\t\t\tcodes: ['E14', 'W07', 'N06', 'S14']\n\t\t},\n\t\tcit: {\n\t\t\tname: 'Built-up Areas (England & Wales)',\n\t\t\ttext: 'build up area',\n\t\t\tcodes: ['E34', 'W37', 'K05']\n\t\t}\n\t};\n\t\n\tlet texts = {\n\t\tnext: ['Show me another...', 'Gimme more...', 'More, more, more...', 'Just one more...', 'Keep \\'em coming'],\n\t\tquit: ['Enough already!', 'I\\'m done!', 'I quit!', 'I\\'m bored!', 'I can\\'t take this any more!', 'I need a break!', 'Please Stop!'],\n\t\twrong: ['Nope, the answer was ', 'Sorry, it was ', 'Bad luck, it was ', 'Are you serious? It was ', 'You need to learn your geography. It was ', 'You\\'re just guessing! It was ']\n\t}\n\t\n\tlet game = {\n\t\tgeography: null,\n\t\tstarted: false,\n\t\tshowscores: false,\n\t\tturn: 0,\n\t\tscore: 0,\n\t\tstreak: 0,\n\t\tplace: null,\n\t\tplaces: null,\n\t\tmessage: null\n\t};\n\t\n\tlet history;\n\t\n\t// Function to load data and start game\n\tfunction startGame(geo) {\n\t\t// Set the geography type\n\t\tgame.geography = geo;\n\t\t\n\t\t// Call function to load/set game history\n\t\tif (!history) {\n\t\t\tsetHistory();\n\t\t}\n\t\t\n\t\t// Reset game turn and score\n\t\tgame.turn = 0;\n\t\tgame.score = 0;\n\t\t\n\t\t// Carry over streak from previous game\n\t\tgame.streak = history[game.geography].streak;\n\t\t\n\t\t// Get geography codes and names from API (initiation of app)\n\t\tgetPlaces(geographies[game.geography].codes)\n\t\t\t.then(result => { places = result; })\n\t\t  .then(() => { nextTurn() });\n\t}\n\t\n\t// New turn. Randomly select a place + get its polygon\n\tfunction nextTurn() {\n\t\tif (!game.started) { game.started = true };\n\t\tlet id = 'boundary';\n\t\t\n\t\t// Get a random place (right answer)\n\t\tlet place = random(places);\n\t\tgame.place = place;\n\t\t\n\t\t// Create an array of possible answers\n\t\tgame.places = [];\n\t\tgame.places.push(place);\n\t\twhile (game.places.length < 3) {\n\t\t\tlet place = random(places);\n\t\t\tif (!game.places.includes(place)) {\n\t\t\t\tgame.places.push(place);\n\t\t\t}\n\t\t}\n\t\tgame.places = shuffle(game.places);\n\t\t\n\t\t// Get geographic boundary of selected place\n\t\tgetBoundary(place.code)\n\t\t.then(result => {\n\t\t\tconsole.log(result);\n\t\t\t// Remove previous boundary from the map\n\t\t\tif (map.getLayer(id)) {\n\t\t\t\tmap.removeLayer(id);\n\t\t\t\tmap.removeSource(id);\n\t\t\t}\n\t\t\t\n\t\t\t// Add new boundary to the map\n\t\t\tmap.addSource(id, {\n\t\t\t\t'type': 'geojson',\n\t\t\t\t'data': result.geometry\n\t\t\t});\n\t\t\tmap.addLayer({\n\t\t\t\t'id': id,\n\t\t\t\t'type': 'line',\n\t\t\t\t'source': id,\n\t\t\t\t'layout': {},\n\t\t\t\t'paint': {\n\t\t\t\t\t'line-color': '#fff',\n\t\t\t\t\t'line-width': 2\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Fit map to boundary\n\t\t\tmap.fitBounds(result.bounds, { padding: 20, animate: false });\n\t\t});\n\t}\n\t\n\t// Check if chosen place is correct\n\tfunction checkPlace(code) {\n\t\tif (code == game.place.code) {\n\t\t\tgame.score += 1;\n\t\t\tgame.streak += 1;\n\t\t\thistory[game.geography].score += 1;\n\t\t\thistory[game.geography].streak += 1;\n\t\t\tif (game.streak > history[game.geography].maxstreak) {\n\t\t\t\thistory[game.geography].maxstreak = game.streak;\n\t\t\t};\n\t\t\tgame.message = `You got it!`;\n\t\t\tif (game.streak >= 5) {\n\t\t\t\tgame.message += ` That\\'s ${game.streak} in a row!`;\n\t\t\t}\n\t\t\tif (game.streak > game.turn && game.turn == 0) {\n\t\t\t\tgame.message += ` <small>(including previous game)</small>`;\n\t\t\t}\n\t\t} else {\n\t\t\tif (game.streak >= 5 && game.streak == history[game.geography].maxstreak) {\n\t\t\t\tgame.message = `Dang, ended longest winning steak! It was ${game.place.name.replace(' BUA', '')}`;\n\t\t\t} else {\n\t\t\t\tgame.message = random(texts.wrong) + game.place.name;\n\t\t\t}\n\t\t\tgame.streak = 0;\n\t\t\thistory[game.geography].streak = 0;\n\t\t}\n\t\tgame.turn += 1;\n\t\thistory[game.geography].turns += 1;\n\t\tgame.place = null;\n\t\tgame.places = null;\n\t\t\n\t\t// Update the game history cookie\n\t\tsetState('history', history);\n\t}\n\t\n\t// Function to set or load game history\n\tfunction setHistory() {\n\t\t// Check for cookie with previous score history\n\t\tif (getState('history') == null) {\n\t\t\t// If no game history cookie, create cookie\n\t\t\tlet hist = {};\n\t\t\tlet keys = Object.keys(geographies);\n\t\t\tfor (let i in keys) {\n\t\t\t\thist[keys[i]] = {\n\t\t\t\t\tturns: 0,\n\t\t\t\t\tscore: 0,\n\t\t\t\t\tstreak: 0,\n\t\t\t\t\tmaxstreak: 0\n\t\t\t\t};\n\t\t\t}\n\t\t\thistory = hist;\n\t\t\tsetState('history', history);\n\t\t} else {\n\t\t\t// Load history cookie\n\t\t\thistory = getState('history');\n\t\t\t\n\t\t\t// Check if history for all game types (in case of future additions)\n\t\t\tlet keys = Object.keys(history);\n\t\t\tlet geos = Object.keys(geographies);\n\t\t\tif (keys.length < geos.length) {\n\t\t\t\tfor (i in geos) {\n\t\t\t\t\tif (!keys.includes(geos[i])) {\n\t\t\t\t\t\thistory[geos[i]] = {\n\t\t\t\t\t\t\tturns: 0,\n\t\t\t\t\t\t\tscore: 0,\n\t\t\t\t\t\t\tstreak: 0,\n\t\t\t\t\t\t\tmaxstreak: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetState('history', history);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Function to end a game\n\tfunction endGame() {\n\t\tlet id = 'boundary';\n\n\t\t// Remove boundary\n\t\tif (map.getLayer(id)) {\n\t\t\tmap.removeLayer(id);\n\t\t\tmap.removeSource(id);\n\t\t}\n\n\t\t// Reset map view\n\t\tmap.fitBounds([\n\t\t\t[-10.760, 49.864],\n\t\t\t[1.863, 59.479]\n\t\t]);\n\n\t\t// Reset game\n\t\tgame.started = false;\n\t}\n\t\n\t// Function to display scores;\n\tfunction showScores() {\n\t\tif (!history) {\n\t\t\tsetHistory();\n\t\t}\n\t\tgame.showscores = !game.showscores;\n\t}\n\n</script>\n\n<style>\n\t:global(body) {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\tmain {\n\t\tpadding: 20px;\n\t}\n\th1 {\n\t\tmargin-top: 10px;\n\t}\n\t.block {\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t\tcursor: pointer;\n\t}\n\t.highlight {\n\t\tbackground-color: #ccc;\n\t}\n\ttd {\n\t\tpadding-left: 0;\n\t\tpadding-right: 20px;\n\t}\n</style>\n\n<Panel>\n\t<main>\n\t\t{#if game.showscores}\n\t\t<h1>Your all time record...</h1>\n\t\t{#each Object.keys(geographies) as geo}\n\t\t  <hr/>\n\t\t\t<h3>{geographies[geo].name}</h3>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Score</td>\n\t\t\t\t\t\t<td><strong>{history[geo].score} / {history[geo].turns} {#if history[geo].turns > 0}({Math.round((history[geo].score / history[geo].turns) * 100)}%){/if}</strong></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Best streak</td>\n\t\t\t\t\t\t<td><strong>{history[geo].maxstreak} in a row</strong></td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t{/each}\n\t\t<button class=\"block highlight\" on:click={showScores}>Close scores</button>\n\t\t{:else if !game.started}\n\t\t  <h1>Guess the geography...</h1>\n\t\t  {#each Object.keys(geographies) as key}\n\t  \t  <button class=\"block\" on:click={() => {startGame(key)}}>{geographies[key].name}</button>\n\t\t  {/each}\n\t\t\t<button class=\"block highlight\" on:click={showScores}>Just show me my scores!</button>\n\t\t{:else if game.started}\n\t\t  <h1>Can you guess the {geographies[game.geography].text}?</h1>\n\t\t  <h3>Score {game.score} / {game.turn} {#if game.turn > 0}({Math.round((game.score / game.turn) * 100)}%){/if}</h3>\n\t\t  {#if game.places}\n\t\t    {#each game.places as place}\n\t  \t    <button class=\"block\" on:click={checkPlace(place.code)}>\n\t\t\t\t\t\t{#if game.geography == 'cit'}\n\t\t\t\t\t\t  {place.name.replace(' BUA', '')} \n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t  {place.name} \n\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{#if game.geography == 'war'}\n\t\t\t\t\t\t  ({place.pname})\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</button>\n\t\t    {/each}\n\t\t  {:else if game.message}\n\t\t\t  <h3>{@html game.message}</h3>\n\t\t    <button class=\"block\" on:click={nextTurn}>{random(texts.next)}</button>\n\t\t    <button class=\"block highlight\" on:click={endGame}>{random(texts.quit)}</button>\n\t\t  {/if}\n\t\t{/if}\n\t</main>\n</Panel>\n\n<Map style={mapstyle} bind:map={map} />",
    "<script>\n\timport { onMount } from 'svelte';\n\timport mapbox from 'mapbox-gl';\n\t\n\texport let location = {\n\t\tbounds: [[-10.760, 49.864], [1.863, 59.479]] // UK Bounding box\n\t};\n\texport let style;\n\t\n\texport let map;\n\tlet container;\n\tlet options;\n\t\n\tfunction resetView() {\n\t\tmap.fitBounds(location.bounds);\n\t}\n\t\n\tif (location.bounds) {\n\t\toptions = { bounds: location.bounds };\n\t} else if (location.lon && location.lat) {\n\t\toptions = {\n\t\t\tcenter: [location.lon, location.lat]\n\t\t}\n\t\tif (location.zoom) {\n\t\t\toptions.zoom = location.zoom;\n\t\t}\n\t};\n\n\tonMount(() => {\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.href = 'https://unpkg.com/mapbox-gl/dist/mapbox-gl.css';\n\n\t\tlink.onload = () => {\n\t\t\tmap = new mapbox.Map({\n\t\t\t\tcontainer,\n\t\t\t\tstyle: style,\n\t\t\t\tinteractive: false,\n\t\t\t\tmaxZoom: 13.9,\n\t\t\t\t...options\n\t\t\t});\n\t\t\tmap.scrollZoom.disable();\n\t\t};\n\n\t\tdocument.head.appendChild(link);\n\n\t\treturn () => {\n\t\t\tmap.remove();\n\t\t\tlink.parentNode.removeChild(link);\n\t\t};\n\t});\n</script>\n\n<style>\n\tdiv {\n\t\twidth: 60%;\n\t\theight: 100%;\n\t\tposition: fixed;\n\t\tright: 0;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\theight: 60%;\n\t\t\tposition: absolute;\n\t\t}\n\t}\n</style>\n\n<div bind:this={container}>\n\t{#if map}\n\t\t<slot></slot>\n\t{/if}\n</div>",
    "<style>\n\tdiv {\n\t\tz-index: 2;\n\t\twidth: 40%;\n\t\tposition: absolute;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\ttop: 60%;\n\t\t}\n\t}\n</style>\n\n<div>\n\t<slot></slot>\n</div>"
  ],
  "names": [],
  "mappings": "AAwOS,IAAI,AAAE,CAAC,AACd,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACX,CAAC,AACD,IAAI,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,AACd,CAAC,AACD,EAAE,cAAC,CAAC,AACH,UAAU,CAAE,IAAI,AACjB,CAAC,AACD,MAAM,cAAC,CAAC,AACP,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,AAChB,CAAC,AACD,UAAU,cAAC,CAAC,AACX,gBAAgB,CAAE,IAAI,AACvB,CAAC,AACD,EAAE,cAAC,CAAC,AACH,YAAY,CAAE,CAAC,CACf,aAAa,CAAE,IAAI,AACpB,CAAC;ACvMD,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,CAAC,AACT,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACF,CAAC;ACjED,GAAG,cAAC,CAAC,AACJ,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,GAAG,CACV,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,GAAG,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,GAAG,AACT,CAAC,AACF,CAAC"
}